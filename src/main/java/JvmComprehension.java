public class JvmComprehension { //Загружается класс "JvmComprehension" в Metaspace с помощью ClassLoader.
    public static void main(String[] args) { //JVM ищет точку входа, начинается выполнение программы, в стеке создается фрейм main().
        int i = 1;                      // 1. В фрейме main() создается переменная примитивного типа "i", которой присваивается значение 1.
        Object o = new Object();        // 2. В куче (Heap) создается объект "о". В стеке (Stack Memory) будет размещена ссылка на объект "о".
        Integer ii = 2;
        /* 3. В куче (Heap) создается объект целочисленного типа Integer со значением 2.
        В стеке (Stack Memory) будет размещена ссылка на объект "ii".*/
        printAll(o, i, ii);
        /* 4. Осуществляется вызов метода printAll().
        Создается новый фрейм в стеке, куда будет переданы ссылки на объекты "o, ii"
        и будет передана переменная "i", которые будут находиться в параметрах метода.*/
        System.out.println("finished");
        /* 7. Выполняется метод println.
        В стеке создается фрейм println(), в который передается ссылка на объект строки String со значением "finished".*/
    }
    /* После завершения метода main() происходит очищение стека, программа завершит свою работу.
       В процессе выполнения программы происходит выполнение сборщика мусора Garbage Collector.*/

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;
        /* 5. В куче (Heap) создается объект целочисленного типа Integer со значением 700.
        В стеке (Stack Memory) во фрейме printAll() будет размещена ссылка "uselessVar" на объект.*/
        System.out.println(o.toString() + i + ii);
        /* 6. Выполняется метод println.
        В стеке создается фрейм println(), в который передается ссылка "o" на объект Object в куче,
                                                                ссылка "ii" на Integer в куче,
                                                                ссылка "i" на int во фрейме main().
        В стеке создается фрейм toString()*/
    }
}